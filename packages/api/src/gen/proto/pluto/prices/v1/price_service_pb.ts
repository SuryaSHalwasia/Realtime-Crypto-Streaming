// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=.ts"
// @generated from file proto/pluto/prices/v1/price_service.proto (package pluto.prices.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message pluto.prices.v1.SubscribeRequest
 */
export class SubscribeRequest extends Message<SubscribeRequest> {
  /**
   * @generated from field: repeated string symbols = 1;
   */
  symbols: string[] = [];

  constructor(data?: PartialMessage<SubscribeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pluto.prices.v1.SubscribeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "symbols", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeRequest | PlainMessage<SubscribeRequest> | undefined, b: SubscribeRequest | PlainMessage<SubscribeRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeRequest, a, b);
  }
}

/**
 * @generated from message pluto.prices.v1.PriceTick
 */
export class PriceTick extends Message<PriceTick> {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol = "";

  /**
   * "BINANCE"
   *
   * @generated from field: string exchange = 2;
   */
  exchange = "";

  /**
   * @generated from field: double price = 3;
   */
  price = 0;

  /**
   * @generated from field: int64 ts_ms = 4;
   */
  tsMs = protoInt64.zero;

  constructor(data?: PartialMessage<PriceTick>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pluto.prices.v1.PriceTick";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exchange", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "price", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "ts_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PriceTick {
    return new PriceTick().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PriceTick {
    return new PriceTick().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PriceTick {
    return new PriceTick().fromJsonString(jsonString, options);
  }

  static equals(a: PriceTick | PlainMessage<PriceTick> | undefined, b: PriceTick | PlainMessage<PriceTick> | undefined): boolean {
    return proto3.util.equals(PriceTick, a, b);
  }
}

/**
 * @generated from message pluto.prices.v1.GetLastPricesRequest
 */
export class GetLastPricesRequest extends Message<GetLastPricesRequest> {
  /**
   * @generated from field: repeated string symbols = 1;
   */
  symbols: string[] = [];

  constructor(data?: PartialMessage<GetLastPricesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pluto.prices.v1.GetLastPricesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "symbols", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLastPricesRequest {
    return new GetLastPricesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLastPricesRequest {
    return new GetLastPricesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLastPricesRequest {
    return new GetLastPricesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLastPricesRequest | PlainMessage<GetLastPricesRequest> | undefined, b: GetLastPricesRequest | PlainMessage<GetLastPricesRequest> | undefined): boolean {
    return proto3.util.equals(GetLastPricesRequest, a, b);
  }
}

/**
 * @generated from message pluto.prices.v1.GetLastPricesResponse
 */
export class GetLastPricesResponse extends Message<GetLastPricesResponse> {
  /**
   * @generated from field: repeated pluto.prices.v1.PriceTick ticks = 1;
   */
  ticks: PriceTick[] = [];

  constructor(data?: PartialMessage<GetLastPricesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pluto.prices.v1.GetLastPricesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ticks", kind: "message", T: PriceTick, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLastPricesResponse {
    return new GetLastPricesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLastPricesResponse {
    return new GetLastPricesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLastPricesResponse {
    return new GetLastPricesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLastPricesResponse | PlainMessage<GetLastPricesResponse> | undefined, b: GetLastPricesResponse | PlainMessage<GetLastPricesResponse> | undefined): boolean {
    return proto3.util.equals(GetLastPricesResponse, a, b);
  }
}

